}
dat
dim(dat)
cbind(dat,pricer[i])
dates = unique(format(time(pricer),"%F"))
dat = pricer[dates[1]]
dat
dates = unique(format(time(pricer),"%F"))
dat = pricer[dates[1]]
for (i in dates[-1]){
#   tmp = pricer[i]
#   time(tmp) = format(time(tmp),"%R")
#   xts(tmp,order.by = format(time(tmp),"%R"))
dat = cbind(dat,as.double(pricer[i]))
}
dat
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = c("red","blue"),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "RV",
major.ticks=F,
#   xaxis=F
)
heat.colors(n, alpha = 1)
heat.colors(length(dates), alpha = 1)
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = heat.colors(n, alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "RV",
major.ticks=F,
#   xaxis=F
)
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = heat.colors(dim(dat)[2], alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "RV",
major.ticks=F,
#   xaxis=F
)
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = rainbow(dim(dat)[2], alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "RV",
major.ticks=F,
#   xaxis=F
)
decompose(pricer)
pricer
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = rainbow(dim(dat)[2], alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "RV",
major.ticks=F,
minor.ticks=F,
#   xaxis=F
)
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = rainbow(dim(dat)[2], alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "Returns",
major.ticks=F,
minor.ticks=F,
#   xaxis=F
)
plot(rv)
rv
dat = cbind(rv$fitted.values,pricer)
dat
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = rainbow(dim(dat)[2], alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "Returns",
major.ticks=F,
minor.ticks=F,
#   xaxis=F
)
chart.TimeSeries(
dat,
auto.grid = F,
#     date.format = "",
col = rainbow(dim(dat)[2], alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "Returns",
major.ticks=F,
minor.ticks=F,
#   xaxis=F
)
rv$fitted.values
pricer
# Clean up our space
graphics.off()
rm(list = ls())
# Load Packages
library(xts)
library(highfrequency)
# Download File
ipc = read.csv(file = "IPC (5 MIN) 26_11-10_12.csv", sep = ",", head = TRUE)
# Download data and transform it to a data frame
ipc = as.data.frame(ipc)
# Convert the date strings to charachter vectors in order to transform
# it to Date format.
ipc[, 1] = as.character(ipc[, 1])
ipc[, 2] = as.character(ipc[, 2])
# Separate the Price vector from the data frame .
price = ipc[, 5]
price = as.data.frame(price)
# Transform the time and date charachter vectors to a valid R format
time = as.POSIXct(paste(ipc$Date, ipc$Time), format = "%Y-%m-%d %H:%M")
# Set the price vector as an extensible time series object in order to apply function harMode
price = xts(price, order.by = time)
# Compute the logaritmic returns of our transformed price vector
pricer = makeReturns(price)
# Set log returns vector in a data frame format
# price.ch = ts(price)
# price.ch = price.ch/lag(price.ch, -1) - 1
price.ch = exp(diff(log(price)))-1
# Apply harModel function which returns the estemites of an heterogeneous autoregressive model For realized volatility.
# The model is mainly used to forecast next day volatility based on the high frequency returns of the past.
rv = harModel(pricer, periods = c(1, 1, 1), periodsJ = c(1, 1, 1),
RVest = c("rCov", "rBPCov"), type = "HARRVCJ", transform = "sqrt")
# Grafical representation of our results
pdf(file = "IPCA1.pdf")
par(mfrow = c(2, 1))
plot(ts(price), col = "blue", main = "IPC 26/11/2015-10/12/2015")
plot(price.ch, main = "Percentage change in stock prices nov 26 to dec 10")
dev.off()
# Plot individual daily returns for our 10 days sample
format(time(pricer),"%R")
dates = unique(format(time(pricer),"%F"))
dat = pricer[dates[1]]
for (i in dates[-1])
dat = cbind(dat,as.double(pricer[i]))
pdf(file = paste0(path,"IPCA2_2.pdf"))
# par(mfrow = c(4, 3))
# plot(pricer[1:79, 1],    main = "Returns on Nov 26")
# plot(pricer[80:158, 1],  main = "Returns on Nov 27")
# plot(pricer[159:237, 1], main = "Returns on Nov 30")
# plot(pricer[238:316, 1], main = "Returns on Dec 01")
# plot(pricer[317:395, 1], main = "Returns on Dec 02")
# plot(pricer[396:474, 1], main = "Returns on Dec 03")
# plot(pricer[475:553, 1], main = "Returns on Dec 04")
# plot(pricer[554:632, 1], main = "Returns on Dec 07")
# plot(pricer[633:711, 1], main = "Returns on Dec 08")
# plot(pricer[712:790, 1], main = "Returns on Dec 09")
# plot(pricer[791:869, 1], main = "Returns on Dec 10")
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = rainbow(dim(dat)[2], alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "Returns",
major.ticks=F,
minor.ticks=F,
#   xaxis=F
)
dev.off()
# Plot the outcome of our harModel
pdf(file = "IPCA3.pdf")
plot(rv)
dev.off()
path
# Clean up our space
graphics.off()
rm(list = ls())
path = "../../Project/project/AlejandroSarmiento&Dimovic/"
# Load Packages
library(xts)
library(highfrequency)
# Download File
ipc = read.csv(file = "IPC (5 MIN) 26_11-10_12.csv", sep = ",", head = TRUE)
# Download data and transform it to a data frame
ipc = as.data.frame(ipc)
# Convert the date strings to charachter vectors in order to transform
# it to Date format.
ipc[, 1] = as.character(ipc[, 1])
ipc[, 2] = as.character(ipc[, 2])
# Separate the Price vector from the data frame .
price = ipc[, 5]
price = as.data.frame(price)
# Transform the time and date charachter vectors to a valid R format
time = as.POSIXct(paste(ipc$Date, ipc$Time), format = "%Y-%m-%d %H:%M")
# Set the price vector as an extensible time series object in order to apply function harMode
price = xts(price, order.by = time)
# Compute the logaritmic returns of our transformed price vector
pricer = makeReturns(price)
# Set log returns vector in a data frame format
# price.ch = ts(price)
# price.ch = price.ch/lag(price.ch, -1) - 1
price.ch = exp(diff(log(price)))-1
# Apply harModel function which returns the estemites of an heterogeneous autoregressive model For realized volatility.
# The model is mainly used to forecast next day volatility based on the high frequency returns of the past.
rv = harModel(pricer, periods = c(1, 1, 1), periodsJ = c(1, 1, 1),
RVest = c("rCov", "rBPCov"), type = "HARRVCJ", transform = "sqrt")
# Grafical representation of our results
pdf(file = "IPCA1.pdf")
par(mfrow = c(2, 1))
plot(ts(price), col = "blue", main = "IPC 26/11/2015-10/12/2015")
plot(price.ch, main = "Percentage change in stock prices nov 26 to dec 10")
dev.off()
# Plot individual daily returns for our 10 days sample
format(time(pricer),"%R")
dates = unique(format(time(pricer),"%F"))
dat = pricer[dates[1]]
for (i in dates[-1])
dat = cbind(dat,as.double(pricer[i]))
pdf(file = paste0(path,"IPCA2_2.pdf"))
# par(mfrow = c(4, 3))
# plot(pricer[1:79, 1],    main = "Returns on Nov 26")
# plot(pricer[80:158, 1],  main = "Returns on Nov 27")
# plot(pricer[159:237, 1], main = "Returns on Nov 30")
# plot(pricer[238:316, 1], main = "Returns on Dec 01")
# plot(pricer[317:395, 1], main = "Returns on Dec 02")
# plot(pricer[396:474, 1], main = "Returns on Dec 03")
# plot(pricer[475:553, 1], main = "Returns on Dec 04")
# plot(pricer[554:632, 1], main = "Returns on Dec 07")
# plot(pricer[633:711, 1], main = "Returns on Dec 08")
# plot(pricer[712:790, 1], main = "Returns on Dec 09")
# plot(pricer[791:869, 1], main = "Returns on Dec 10")
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = rainbow(dim(dat)[2], alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "Returns",
major.ticks=F,
minor.ticks=F,
#   xaxis=F
)
dev.off()
# Plot the outcome of our harModel
pdf(file = "IPCA3.pdf")
plot(rv)
dev.off()
# Clean up our space
graphics.off()
rm(list = ls())
path = "../../Project/project/AlejandroSarmiento&Dimovic/"
# Load Packages
library(xts)
library(highfrequency)
# Download File
ipc = read.csv(file = "IPC (5 MIN) 26_11-10_12.csv", sep = ",", head = TRUE)
# Download data and transform it to a data frame
ipc = as.data.frame(ipc)
# Convert the date strings to charachter vectors in order to transform
# it to Date format.
ipc[, 1] = as.character(ipc[, 1])
ipc[, 2] = as.character(ipc[, 2])
# Separate the Price vector from the data frame .
price = ipc[, 5]
price = as.data.frame(price)
# Transform the time and date charachter vectors to a valid R format
time = as.POSIXct(paste(ipc$Date, ipc$Time), format = "%Y-%m-%d %H:%M")
# Set the price vector as an extensible time series object in order to apply function harMode
price = xts(price, order.by = time)
# Compute the logaritmic returns of our transformed price vector
pricer = makeReturns(price)
# Set log returns vector in a data frame format
# price.ch = ts(price)
# price.ch = price.ch/lag(price.ch, -1) - 1
price.ch = exp(diff(log(price)))-1
# Apply harModel function which returns the estemites of an heterogeneous autoregressive model For realized volatility.
# The model is mainly used to forecast next day volatility based on the high frequency returns of the past.
rv = harModel(pricer, periods = c(1, 1, 1), periodsJ = c(1, 1, 1),
RVest = c("rCov", "rBPCov"), type = "HARRVCJ", transform = "sqrt")
# Grafical representation of our results
pdf(file = "IPCA1.pdf")
par(mfrow = c(2, 1))
plot(ts(price), col = "blue", main = "IPC 26/11/2015-10/12/2015")
plot(price.ch, main = "Percentage change in stock prices nov 26 to dec 10")
dev.off()
# data preparation
dates = unique(format(time(pricer),"%F"))
dat = pricer[dates[1]]
for (i in dates[-1])
dat = cbind(dat,as.double(pricer[i]))
# Plot individual daily returns for our 10 days sample
pdf(file = paste0(path,"IPCA2_2.pdf"))
# par(mfrow = c(4, 3))
# plot(pricer[1:79, 1],    main = "Returns on Nov 26")
# plot(pricer[80:158, 1],  main = "Returns on Nov 27")
# plot(pricer[159:237, 1], main = "Returns on Nov 30")
# plot(pricer[238:316, 1], main = "Returns on Dec 01")
# plot(pricer[317:395, 1], main = "Returns on Dec 02")
# plot(pricer[396:474, 1], main = "Returns on Dec 03")
# plot(pricer[475:553, 1], main = "Returns on Dec 04")
# plot(pricer[554:632, 1], main = "Returns on Dec 07")
# plot(pricer[633:711, 1], main = "Returns on Dec 08")
# plot(pricer[712:790, 1], main = "Returns on Dec 09")
# plot(pricer[791:869, 1], main = "Returns on Dec 10")
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = rainbow(dim(dat)[2], alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "Returns",
major.ticks=F,
minor.ticks=F,
#   xaxis=F
)
dev.off()
# Plot the outcome of our harModel
pdf(file = "IPCA3.pdf")
plot(rv)
dev.off()
# Clean up our space
graphics.off()
rm(list = ls())
path = "../../Project/project/AlejandroSarmiento&Dimovic/"
# Load Packages
library(xts)
library(highfrequency)
# Download File
ipc = read.csv(file = "IPC (5 MIN) 26_11-10_12.csv", sep = ",", head = TRUE)
# Download data and transform it to a data frame
ipc = as.data.frame(ipc)
# Convert the date strings to charachter vectors in order to transform
# it to Date format.
ipc[, 1] = as.character(ipc[, 1])
ipc[, 2] = as.character(ipc[, 2])
# Separate the Price vector from the data frame .
price = ipc[, 5]
price = as.data.frame(price)
# Transform the time and date charachter vectors to a valid R format
time = as.POSIXct(paste(ipc$Date, ipc$Time), format = "%Y-%m-%d %H:%M")
# Set the price vector as an extensible time series object in order to apply function harMode
price = xts(price, order.by = time)
# Compute the logaritmic returns of our transformed price vector
pricer = makeReturns(price)
# Set log returns vector in a data frame format
# price.ch = ts(price)
# price.ch = price.ch/lag(price.ch, -1) - 1
price.ch = exp(diff(log(price)))-1
# Apply harModel function which returns the estemites of an heterogeneous autoregressive model For realized volatility.
# The model is mainly used to forecast next day volatility based on the high frequency returns of the past.
rv = harModel(pricer, periods = c(1, 1, 1), periodsJ = c(1, 1, 1),
RVest = c("rCov", "rBPCov"), type = "HARRVCJ", transform = "sqrt")
# Grafical representation of our results
pdf(file = "IPCA1.pdf")
par(mfrow = c(2, 1))
plot(ts(price), col = "blue", main = "IPC 26/11/2015-10/12/2015")
plot(price.ch, main = "Percentage change in stock prices nov 26 to dec 10")
dev.off()
# data preparation
dates = unique(format(time(pricer),"%F"))
dat = pricer[dates[1]]
for (i in dates[-1])
dat = cbind(dat,as.double(pricer[i]))
# Plot individual daily returns for our 10 days sample
pdf(file = paste0(path,"IPCA2_2.pdf"),width = 8,height = 5)
# par(mfrow = c(4, 3))
# plot(pricer[1:79, 1],    main = "Returns on Nov 26")
# plot(pricer[80:158, 1],  main = "Returns on Nov 27")
# plot(pricer[159:237, 1], main = "Returns on Nov 30")
# plot(pricer[238:316, 1], main = "Returns on Dec 01")
# plot(pricer[317:395, 1], main = "Returns on Dec 02")
# plot(pricer[396:474, 1], main = "Returns on Dec 03")
# plot(pricer[475:553, 1], main = "Returns on Dec 04")
# plot(pricer[554:632, 1], main = "Returns on Dec 07")
# plot(pricer[633:711, 1], main = "Returns on Dec 08")
# plot(pricer[712:790, 1], main = "Returns on Dec 09")
# plot(pricer[791:869, 1], main = "Returns on Dec 10")
chart.TimeSeries(
dat,
auto.grid = F,
date.format = "%R",
col = rainbow(dim(dat)[2], alpha = 1),
lwd = 1,
type = "l",
main = NA,#"5 minutes realized volatility",
element.color = "black",
ylab = "Returns",
major.ticks=F,
minor.ticks=F,
#   xaxis=F
)
dev.off()
# Plot the outcome of our harModel
pdf(file = "IPCA3.pdf")
plot(rv)
dev.off()
# Clear enviorenment
graphics.off()
rm(list = ls())
# Load packages
library(highfrequency)
# Load data from R enviorenment
data(realized_library)
# Select Dow Jones, CAC 40, FTSE 100 and USD-Euro returns Realized
# Variance vectors
DJI_RV  = realized_library$Dow.Jones.Industrials.Realized.Variance
CAC_RV  = realized_library$CAC.40.Realized.Variance
FTSE_RV = realized_library$FTSE.100.Realized.Variance
UE_RV   = realized_library$USD.Euro.Realized.Variance
# Remove NA's
DJI_RV  = DJI_RV[!is.na(DJI_RV)]
CAC_RV  = CAC_RV[!is.na(CAC_RV)]
FTSE_RV = FTSE_RV[!is.na(FTSE_RV)]
UE_RV   = UE_RV[!is.na(UE_RV)]
# Select Year 2008
DJ_RV  = DJI_RV["2008"]
CAC_RV  = CAC_RV["2008"]
FTSE_RV = FTSE_RV["2008"]
UE_RV   = UE_RV["2008"]
# due to time delay in timeseries of UE, its time has to be shifted by 1 day
time(UE_RV) = time(UE_RV)+60*60*24
# Apply the har Model for observed and forecasted realized variance in
# a HAR model
DJ   = harModel(data = DJ_RV, periods = c(1, 5, 22), RVest = c("rCov"),
type = "HARRV", h = 1, transform = NULL)
CAC  = harModel(data = CAC_RV, periods = c(1, 5, 22), RVest = c("rCov"),
type = "HARRV", h = 1, transform = NULL)
FTSE = harModel(data = FTSE_RV, periods = c(1, 5, 22), RVest = c("rCov"),
type = "HARRV", h = 1, transform = NULL)
UE   = harModel(data = UE_RV, periods = c(1, 5, 22), RVest = c("rCov"), type = "HARRV",
h = 1, transform = NULL)
# results summary
summary(DJ)
summary(CAC)
summary(FTSE)
summary(UE)
class(UE_RV)
nam = c("DJ","CAC","FTSE","UE")
# constructing timeseries
for (i in nam){
rv = get(paste0(i,"_RV"))
fit = get(i)$fitted.values
assign(x = paste0(i,"ts"),xts(fit,order.by = time(rv)[-c(1:22)]))
}
# combining time series
dat = cbind(DJ_RV, CAC_RV, FTSE_RV, UE_RV, DJts, CACts, FTSEts, UEts)
dat = na.omit(dat[format(time(dat),"%B")!="Januar",])
colnames(dat) = c(nam,paste0(nam,"ts"))
# PLOTS
for (i in nam){
pdf(file = paste0(i,".pdf"), width = 8, height = 1.5)
par(mar = c(2,4,1.5,1))
chart.TimeSeries(
dat[,sort(grep(i,colnames(dat)),decreasing = T)],
auto.grid = F,
date.format = "%b",
col = c("red","blue"),
lwd = 1,
type = "l",
main = i,#"5 minutes realized volatility",
element.color = "black",
ylab = "RV",
major.ticks=F,
xaxis=F
)
axTicks = c(1,which(diff(as.numeric(format(time(dat),"%m")))!=0)+1)
axis(1,c(axTicks,dim(dat)[1]),c(format(time(dat)[axTicks],format="%b"),"Jan"),cex.axis=0.8)
dev.off()
}
i
